//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/GameControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameControls"",
    ""maps"": [
        {
            ""name"": ""GameControl"",
            ""id"": ""c81a5427-af84-4b13-88ae-6a131e12d8f8"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Value"",
                    ""id"": ""6fab4e8e-403d-4828-82e5-a860aeceb045"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""0340906f-fd2b-4e9c-9d44-ec30cb289000"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Mous"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4dc04707-b028-446c-aac8-a4ba71c817a1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""aeaaf723-e809-4250-b7ea-40e8949fb406"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ecaa84ab-288b-4841-a180-25a82fe3a1aa"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c450768a-3850-446c-b5f5-ccfd72aeedb6"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f50f9728-6bfd-43ed-a812-be3467c6a438"",
                    ""path"": ""<XInputController>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": ""AxisDeadzone"",
                    ""groups"": ""xBox"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cc9d7d65-9bab-440f-99c8-1d1ef7d57f2f"",
                    ""path"": ""<HID::USB Gamepad >/button2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""SuilyGamePad"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""bfa990cb-fc13-41d4-b9ea-c21543fbb21d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""815e1396-3680-40d0-b79a-eb09b4278c01"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""43812b93-30af-4e84-a699-14c33eb9955a"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""b40f0586-f5a4-4ab1-bfd5-3bafdc2fcfb9"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""43272eb4-529c-46ed-a7a6-04f6a295ec97"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1881bd49-caf1-48da-a1f9-9dbc7f0543e0"",
                    ""path"": ""<XInputController>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""xBox"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""3eceff4f-cb27-4b0a-af1c-438418ea154a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""d3726a16-42b4-4806-9c56-a6d4c40378d9"",
                    ""path"": ""<HID::USB Gamepad >/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""SuilyGamePad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f3d44114-e876-4802-8049-d5e9240b5ee4"",
                    ""path"": ""<HID::USB Gamepad >/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""SuilyGamePad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""fc7b86e3-e22e-482d-b7eb-4188f6e7c1e7"",
                    ""path"": ""<HID::USB Gamepad >/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""SuilyGamePad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f57f14cf-4f2c-40f4-a9e3-5e6beb3927a3"",
                    ""path"": ""<HID::USB Gamepad >/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""SuilyGamePad"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""13dd8c36-2b30-4b62-a079-1bdaec1d192c"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Mous"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c28dcd4b-d3f1-4474-992b-66ce476e576b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b6fcbb38-8560-4754-beec-63e80df0b3d3"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PauseControl"",
            ""id"": ""28ffc867-b337-4423-a0d6-7c48f84a2442"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""532c3233-d020-4175-b5dd-e2b31066348c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ArrowUp"",
                    ""type"": ""Button"",
                    ""id"": ""87512d1e-fdf1-457b-97e1-5bc7b80c5feb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ArrowDown"",
                    ""type"": ""Button"",
                    ""id"": ""ca42aa56-d702-4f93-ab36-6204da6f8530"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""06deba27-3b23-4b15-b988-086bb6ae5896"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4de41150-44ed-4ac1-a889-dff6233c4f77"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0370f6ca-8426-4dc2-944e-2537ff4d63f9"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe4c4238-39b8-47c3-ac59-2c2ecaef38ec"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eb2f0db6-c93e-473a-b544-62496229bc2a"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ArrowUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef01c107-4b7f-46a3-8884-0f7f8aebb8b4"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""ArrowUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b31f59b-9836-44b6-9b26-7d31aa34937b"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""ArrowUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3bb9a9a3-768a-4d43-ac49-3385bb140a95"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ArrowDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f9829f73-0666-45a7-a099-2e5dc2f27937"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""ArrowDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0985c4c6-e41d-43ab-85c6-c5a59710f6c3"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""ArrowDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d700615-99dc-457e-be70-8a9d6c2a6d70"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c17091e4-d900-4877-87fc-86deef1d32db"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""StoreControl"",
            ""id"": ""6b10d1aa-8d6f-41f7-b800-1577d39603b6"",
            ""actions"": [
                {
                    ""name"": ""ArrowLeft"",
                    ""type"": ""Button"",
                    ""id"": ""159f3dcc-d9cf-4ad7-afae-e432f214ae1d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ArrowRight"",
                    ""type"": ""Button"",
                    ""id"": ""83d261d3-ecf9-4094-9af7-ecbb600b60f5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ArrowUp"",
                    ""type"": ""Button"",
                    ""id"": ""b327f0f1-8bf6-4853-a4eb-beccf49e0cdc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ArrowDown"",
                    ""type"": ""Button"",
                    ""id"": ""155f0a9f-77be-4261-ab78-5c868f2eba6d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""28f4743c-c90f-44e2-8b2f-ddc256f58424"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""5b010e79-7003-4024-bf8f-8c28e287a23c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d967495d-ee06-496a-8e50-297ec378638d"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ArrowLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4d829a0d-7cd5-4121-aca3-577512dbd8c2"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ArrowLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48a64e9e-db1e-4ed7-b33c-6de010984d6f"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ArrowLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13b53b31-5d7c-4b20-b7f7-75bc96f77430"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ArrowRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""572f37b2-a398-48fb-9162-466179a6a6a5"",
                    ""path"": ""<Gamepad>/dpad/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ArrowRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""554beda6-68fb-4b57-87f7-1303563e3019"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ArrowRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dad1a09c-63fb-4eed-bc12-9380a127f7be"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ArrowUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""12f3762b-b8cd-40d7-a639-10aaa05a66f8"",
                    ""path"": ""<Gamepad>/dpad/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ArrowUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef118c09-ddb9-4dd9-a491-0bb425d601f4"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ArrowUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3da7ac92-bcb4-41cf-ac01-b70f1a738168"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ArrowDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f19c0f8-38ee-481c-9a19-cb602aa977cf"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ArrowDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""89fc95c5-18d4-4fd5-9e2a-ef65ad1cb785"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ArrowDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""08155521-841d-448a-a0ba-02e345c89971"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2dd234fb-79ff-4951-abc4-931890748b9d"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b88b9d0b-d669-4822-859c-67d7713d7dc5"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""313f4c5a-e15d-424e-9ceb-a6f7e7695c6d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70656983-36b3-43c1-8421-61900f36be53"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cb3e85fe-a5ea-49f4-a49a-f6b2ef690be1"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CheatControl"",
            ""id"": ""afbce948-e4d3-450d-bf66-87459808b673"",
            ""actions"": [
                {
                    ""name"": ""Action1"",
                    ""type"": ""Button"",
                    ""id"": ""c0e37b6c-368d-43ba-9fba-fe49fe525eda"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action2"",
                    ""type"": ""Button"",
                    ""id"": ""bb3a84dd-04ff-4822-9bbd-9cbfd346f3e2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action3"",
                    ""type"": ""Button"",
                    ""id"": ""71b3dc28-d94b-4155-94f9-3f348248d56d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f93a6972-3b59-498e-a035-7dc0ae744d7a"",
                    ""path"": ""<Keyboard>/9"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fc67c2b3-2be7-4530-86c1-e64a4680a3d4"",
                    ""path"": ""<Keyboard>/8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a5c4558b-4a6c-49b8-8f52-70749774dbc3"",
                    ""path"": ""<Keyboard>/7"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MovieControl"",
            ""id"": ""fc1f1bad-4265-4866-8fc2-1552b99f5ac8"",
            ""actions"": [
                {
                    ""name"": ""Skip"",
                    ""type"": ""PassThrough"",
                    ""id"": ""8a4d6c5b-70c5-4d6c-9a53-e87df003518b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0d20b2ce-70e1-42ed-bd12-cfbbbc83f520"",
                    ""path"": ""<Keyboard>/anyKey"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyBoard"",
                    ""action"": ""Skip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyBoard"",
            ""bindingGroup"": ""KeyBoard"",
            ""devices"": []
        },
        {
            ""name"": ""xBox"",
            ""bindingGroup"": ""xBox"",
            ""devices"": []
        },
        {
            ""name"": ""SuilyGamePad"",
            ""bindingGroup"": ""SuilyGamePad"",
            ""devices"": []
        }
    ]
}");
        // GameControl
        m_GameControl = asset.FindActionMap("GameControl", throwIfNotFound: true);
        m_GameControl_Attack = m_GameControl.FindAction("Attack", throwIfNotFound: true);
        m_GameControl_Movement = m_GameControl.FindAction("Movement", throwIfNotFound: true);
        m_GameControl_Mous = m_GameControl.FindAction("Mous", throwIfNotFound: true);
        m_GameControl_Pause = m_GameControl.FindAction("Pause", throwIfNotFound: true);
        // PauseControl
        m_PauseControl = asset.FindActionMap("PauseControl", throwIfNotFound: true);
        m_PauseControl_Click = m_PauseControl.FindAction("Click", throwIfNotFound: true);
        m_PauseControl_ArrowUp = m_PauseControl.FindAction("ArrowUp", throwIfNotFound: true);
        m_PauseControl_ArrowDown = m_PauseControl.FindAction("ArrowDown", throwIfNotFound: true);
        m_PauseControl_Escape = m_PauseControl.FindAction("Escape", throwIfNotFound: true);
        // StoreControl
        m_StoreControl = asset.FindActionMap("StoreControl", throwIfNotFound: true);
        m_StoreControl_ArrowLeft = m_StoreControl.FindAction("ArrowLeft", throwIfNotFound: true);
        m_StoreControl_ArrowRight = m_StoreControl.FindAction("ArrowRight", throwIfNotFound: true);
        m_StoreControl_ArrowUp = m_StoreControl.FindAction("ArrowUp", throwIfNotFound: true);
        m_StoreControl_ArrowDown = m_StoreControl.FindAction("ArrowDown", throwIfNotFound: true);
        m_StoreControl_Select = m_StoreControl.FindAction("Select", throwIfNotFound: true);
        m_StoreControl_Escape = m_StoreControl.FindAction("Escape", throwIfNotFound: true);
        // CheatControl
        m_CheatControl = asset.FindActionMap("CheatControl", throwIfNotFound: true);
        m_CheatControl_Action1 = m_CheatControl.FindAction("Action1", throwIfNotFound: true);
        m_CheatControl_Action2 = m_CheatControl.FindAction("Action2", throwIfNotFound: true);
        m_CheatControl_Action3 = m_CheatControl.FindAction("Action3", throwIfNotFound: true);
        // MovieControl
        m_MovieControl = asset.FindActionMap("MovieControl", throwIfNotFound: true);
        m_MovieControl_Skip = m_MovieControl.FindAction("Skip", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // GameControl
    private readonly InputActionMap m_GameControl;
    private IGameControlActions m_GameControlActionsCallbackInterface;
    private readonly InputAction m_GameControl_Attack;
    private readonly InputAction m_GameControl_Movement;
    private readonly InputAction m_GameControl_Mous;
    private readonly InputAction m_GameControl_Pause;
    public struct GameControlActions
    {
        private @GameControls m_Wrapper;
        public GameControlActions(@GameControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_GameControl_Attack;
        public InputAction @Movement => m_Wrapper.m_GameControl_Movement;
        public InputAction @Mous => m_Wrapper.m_GameControl_Mous;
        public InputAction @Pause => m_Wrapper.m_GameControl_Pause;
        public InputActionMap Get() { return m_Wrapper.m_GameControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameControlActions set) { return set.Get(); }
        public void SetCallbacks(IGameControlActions instance)
        {
            if (m_Wrapper.m_GameControlActionsCallbackInterface != null)
            {
                @Attack.started -= m_Wrapper.m_GameControlActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_GameControlActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_GameControlActionsCallbackInterface.OnAttack;
                @Movement.started -= m_Wrapper.m_GameControlActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_GameControlActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_GameControlActionsCallbackInterface.OnMovement;
                @Mous.started -= m_Wrapper.m_GameControlActionsCallbackInterface.OnMous;
                @Mous.performed -= m_Wrapper.m_GameControlActionsCallbackInterface.OnMous;
                @Mous.canceled -= m_Wrapper.m_GameControlActionsCallbackInterface.OnMous;
                @Pause.started -= m_Wrapper.m_GameControlActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_GameControlActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_GameControlActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_GameControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Mous.started += instance.OnMous;
                @Mous.performed += instance.OnMous;
                @Mous.canceled += instance.OnMous;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public GameControlActions @GameControl => new GameControlActions(this);

    // PauseControl
    private readonly InputActionMap m_PauseControl;
    private IPauseControlActions m_PauseControlActionsCallbackInterface;
    private readonly InputAction m_PauseControl_Click;
    private readonly InputAction m_PauseControl_ArrowUp;
    private readonly InputAction m_PauseControl_ArrowDown;
    private readonly InputAction m_PauseControl_Escape;
    public struct PauseControlActions
    {
        private @GameControls m_Wrapper;
        public PauseControlActions(@GameControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_PauseControl_Click;
        public InputAction @ArrowUp => m_Wrapper.m_PauseControl_ArrowUp;
        public InputAction @ArrowDown => m_Wrapper.m_PauseControl_ArrowDown;
        public InputAction @Escape => m_Wrapper.m_PauseControl_Escape;
        public InputActionMap Get() { return m_Wrapper.m_PauseControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PauseControlActions set) { return set.Get(); }
        public void SetCallbacks(IPauseControlActions instance)
        {
            if (m_Wrapper.m_PauseControlActionsCallbackInterface != null)
            {
                @Click.started -= m_Wrapper.m_PauseControlActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_PauseControlActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_PauseControlActionsCallbackInterface.OnClick;
                @ArrowUp.started -= m_Wrapper.m_PauseControlActionsCallbackInterface.OnArrowUp;
                @ArrowUp.performed -= m_Wrapper.m_PauseControlActionsCallbackInterface.OnArrowUp;
                @ArrowUp.canceled -= m_Wrapper.m_PauseControlActionsCallbackInterface.OnArrowUp;
                @ArrowDown.started -= m_Wrapper.m_PauseControlActionsCallbackInterface.OnArrowDown;
                @ArrowDown.performed -= m_Wrapper.m_PauseControlActionsCallbackInterface.OnArrowDown;
                @ArrowDown.canceled -= m_Wrapper.m_PauseControlActionsCallbackInterface.OnArrowDown;
                @Escape.started -= m_Wrapper.m_PauseControlActionsCallbackInterface.OnEscape;
                @Escape.performed -= m_Wrapper.m_PauseControlActionsCallbackInterface.OnEscape;
                @Escape.canceled -= m_Wrapper.m_PauseControlActionsCallbackInterface.OnEscape;
            }
            m_Wrapper.m_PauseControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @ArrowUp.started += instance.OnArrowUp;
                @ArrowUp.performed += instance.OnArrowUp;
                @ArrowUp.canceled += instance.OnArrowUp;
                @ArrowDown.started += instance.OnArrowDown;
                @ArrowDown.performed += instance.OnArrowDown;
                @ArrowDown.canceled += instance.OnArrowDown;
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
            }
        }
    }
    public PauseControlActions @PauseControl => new PauseControlActions(this);

    // StoreControl
    private readonly InputActionMap m_StoreControl;
    private IStoreControlActions m_StoreControlActionsCallbackInterface;
    private readonly InputAction m_StoreControl_ArrowLeft;
    private readonly InputAction m_StoreControl_ArrowRight;
    private readonly InputAction m_StoreControl_ArrowUp;
    private readonly InputAction m_StoreControl_ArrowDown;
    private readonly InputAction m_StoreControl_Select;
    private readonly InputAction m_StoreControl_Escape;
    public struct StoreControlActions
    {
        private @GameControls m_Wrapper;
        public StoreControlActions(@GameControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @ArrowLeft => m_Wrapper.m_StoreControl_ArrowLeft;
        public InputAction @ArrowRight => m_Wrapper.m_StoreControl_ArrowRight;
        public InputAction @ArrowUp => m_Wrapper.m_StoreControl_ArrowUp;
        public InputAction @ArrowDown => m_Wrapper.m_StoreControl_ArrowDown;
        public InputAction @Select => m_Wrapper.m_StoreControl_Select;
        public InputAction @Escape => m_Wrapper.m_StoreControl_Escape;
        public InputActionMap Get() { return m_Wrapper.m_StoreControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StoreControlActions set) { return set.Get(); }
        public void SetCallbacks(IStoreControlActions instance)
        {
            if (m_Wrapper.m_StoreControlActionsCallbackInterface != null)
            {
                @ArrowLeft.started -= m_Wrapper.m_StoreControlActionsCallbackInterface.OnArrowLeft;
                @ArrowLeft.performed -= m_Wrapper.m_StoreControlActionsCallbackInterface.OnArrowLeft;
                @ArrowLeft.canceled -= m_Wrapper.m_StoreControlActionsCallbackInterface.OnArrowLeft;
                @ArrowRight.started -= m_Wrapper.m_StoreControlActionsCallbackInterface.OnArrowRight;
                @ArrowRight.performed -= m_Wrapper.m_StoreControlActionsCallbackInterface.OnArrowRight;
                @ArrowRight.canceled -= m_Wrapper.m_StoreControlActionsCallbackInterface.OnArrowRight;
                @ArrowUp.started -= m_Wrapper.m_StoreControlActionsCallbackInterface.OnArrowUp;
                @ArrowUp.performed -= m_Wrapper.m_StoreControlActionsCallbackInterface.OnArrowUp;
                @ArrowUp.canceled -= m_Wrapper.m_StoreControlActionsCallbackInterface.OnArrowUp;
                @ArrowDown.started -= m_Wrapper.m_StoreControlActionsCallbackInterface.OnArrowDown;
                @ArrowDown.performed -= m_Wrapper.m_StoreControlActionsCallbackInterface.OnArrowDown;
                @ArrowDown.canceled -= m_Wrapper.m_StoreControlActionsCallbackInterface.OnArrowDown;
                @Select.started -= m_Wrapper.m_StoreControlActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_StoreControlActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_StoreControlActionsCallbackInterface.OnSelect;
                @Escape.started -= m_Wrapper.m_StoreControlActionsCallbackInterface.OnEscape;
                @Escape.performed -= m_Wrapper.m_StoreControlActionsCallbackInterface.OnEscape;
                @Escape.canceled -= m_Wrapper.m_StoreControlActionsCallbackInterface.OnEscape;
            }
            m_Wrapper.m_StoreControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ArrowLeft.started += instance.OnArrowLeft;
                @ArrowLeft.performed += instance.OnArrowLeft;
                @ArrowLeft.canceled += instance.OnArrowLeft;
                @ArrowRight.started += instance.OnArrowRight;
                @ArrowRight.performed += instance.OnArrowRight;
                @ArrowRight.canceled += instance.OnArrowRight;
                @ArrowUp.started += instance.OnArrowUp;
                @ArrowUp.performed += instance.OnArrowUp;
                @ArrowUp.canceled += instance.OnArrowUp;
                @ArrowDown.started += instance.OnArrowDown;
                @ArrowDown.performed += instance.OnArrowDown;
                @ArrowDown.canceled += instance.OnArrowDown;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
                @Escape.started += instance.OnEscape;
                @Escape.performed += instance.OnEscape;
                @Escape.canceled += instance.OnEscape;
            }
        }
    }
    public StoreControlActions @StoreControl => new StoreControlActions(this);

    // CheatControl
    private readonly InputActionMap m_CheatControl;
    private ICheatControlActions m_CheatControlActionsCallbackInterface;
    private readonly InputAction m_CheatControl_Action1;
    private readonly InputAction m_CheatControl_Action2;
    private readonly InputAction m_CheatControl_Action3;
    public struct CheatControlActions
    {
        private @GameControls m_Wrapper;
        public CheatControlActions(@GameControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Action1 => m_Wrapper.m_CheatControl_Action1;
        public InputAction @Action2 => m_Wrapper.m_CheatControl_Action2;
        public InputAction @Action3 => m_Wrapper.m_CheatControl_Action3;
        public InputActionMap Get() { return m_Wrapper.m_CheatControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CheatControlActions set) { return set.Get(); }
        public void SetCallbacks(ICheatControlActions instance)
        {
            if (m_Wrapper.m_CheatControlActionsCallbackInterface != null)
            {
                @Action1.started -= m_Wrapper.m_CheatControlActionsCallbackInterface.OnAction1;
                @Action1.performed -= m_Wrapper.m_CheatControlActionsCallbackInterface.OnAction1;
                @Action1.canceled -= m_Wrapper.m_CheatControlActionsCallbackInterface.OnAction1;
                @Action2.started -= m_Wrapper.m_CheatControlActionsCallbackInterface.OnAction2;
                @Action2.performed -= m_Wrapper.m_CheatControlActionsCallbackInterface.OnAction2;
                @Action2.canceled -= m_Wrapper.m_CheatControlActionsCallbackInterface.OnAction2;
                @Action3.started -= m_Wrapper.m_CheatControlActionsCallbackInterface.OnAction3;
                @Action3.performed -= m_Wrapper.m_CheatControlActionsCallbackInterface.OnAction3;
                @Action3.canceled -= m_Wrapper.m_CheatControlActionsCallbackInterface.OnAction3;
            }
            m_Wrapper.m_CheatControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Action1.started += instance.OnAction1;
                @Action1.performed += instance.OnAction1;
                @Action1.canceled += instance.OnAction1;
                @Action2.started += instance.OnAction2;
                @Action2.performed += instance.OnAction2;
                @Action2.canceled += instance.OnAction2;
                @Action3.started += instance.OnAction3;
                @Action3.performed += instance.OnAction3;
                @Action3.canceled += instance.OnAction3;
            }
        }
    }
    public CheatControlActions @CheatControl => new CheatControlActions(this);

    // MovieControl
    private readonly InputActionMap m_MovieControl;
    private IMovieControlActions m_MovieControlActionsCallbackInterface;
    private readonly InputAction m_MovieControl_Skip;
    public struct MovieControlActions
    {
        private @GameControls m_Wrapper;
        public MovieControlActions(@GameControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Skip => m_Wrapper.m_MovieControl_Skip;
        public InputActionMap Get() { return m_Wrapper.m_MovieControl; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovieControlActions set) { return set.Get(); }
        public void SetCallbacks(IMovieControlActions instance)
        {
            if (m_Wrapper.m_MovieControlActionsCallbackInterface != null)
            {
                @Skip.started -= m_Wrapper.m_MovieControlActionsCallbackInterface.OnSkip;
                @Skip.performed -= m_Wrapper.m_MovieControlActionsCallbackInterface.OnSkip;
                @Skip.canceled -= m_Wrapper.m_MovieControlActionsCallbackInterface.OnSkip;
            }
            m_Wrapper.m_MovieControlActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Skip.started += instance.OnSkip;
                @Skip.performed += instance.OnSkip;
                @Skip.canceled += instance.OnSkip;
            }
        }
    }
    public MovieControlActions @MovieControl => new MovieControlActions(this);
    private int m_KeyBoardSchemeIndex = -1;
    public InputControlScheme KeyBoardScheme
    {
        get
        {
            if (m_KeyBoardSchemeIndex == -1) m_KeyBoardSchemeIndex = asset.FindControlSchemeIndex("KeyBoard");
            return asset.controlSchemes[m_KeyBoardSchemeIndex];
        }
    }
    private int m_xBoxSchemeIndex = -1;
    public InputControlScheme xBoxScheme
    {
        get
        {
            if (m_xBoxSchemeIndex == -1) m_xBoxSchemeIndex = asset.FindControlSchemeIndex("xBox");
            return asset.controlSchemes[m_xBoxSchemeIndex];
        }
    }
    private int m_SuilyGamePadSchemeIndex = -1;
    public InputControlScheme SuilyGamePadScheme
    {
        get
        {
            if (m_SuilyGamePadSchemeIndex == -1) m_SuilyGamePadSchemeIndex = asset.FindControlSchemeIndex("SuilyGamePad");
            return asset.controlSchemes[m_SuilyGamePadSchemeIndex];
        }
    }
    public interface IGameControlActions
    {
        void OnAttack(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnMous(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IPauseControlActions
    {
        void OnClick(InputAction.CallbackContext context);
        void OnArrowUp(InputAction.CallbackContext context);
        void OnArrowDown(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
    }
    public interface IStoreControlActions
    {
        void OnArrowLeft(InputAction.CallbackContext context);
        void OnArrowRight(InputAction.CallbackContext context);
        void OnArrowUp(InputAction.CallbackContext context);
        void OnArrowDown(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
    }
    public interface ICheatControlActions
    {
        void OnAction1(InputAction.CallbackContext context);
        void OnAction2(InputAction.CallbackContext context);
        void OnAction3(InputAction.CallbackContext context);
    }
    public interface IMovieControlActions
    {
        void OnSkip(InputAction.CallbackContext context);
    }
}
